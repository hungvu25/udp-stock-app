import socket
import json
import time
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import base64

class TestClient:
    def __init__(self, server_host='localhost', server_port=12345, password='shared_secret_key'):
        self.server_host = server_host
        self.server_port = server_port
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.settimeout(10)
        
        # T·∫°o key m√£ h√≥a t·ª´ password (ph·∫£i gi·ªëng server)
        self.cipher_suite = self._create_cipher(password)
    
    def _create_cipher(self, password):
        """T·∫°o cipher t·ª´ password (gi·ªëng server)"""
        password_bytes = password.encode()
        salt = b'fixed_salt_12345'  # Ph·∫£i gi·ªëng server
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(password_bytes))
        return Fernet(key)
    
    def encrypt_message(self, message):
        """M√£ h√≥a d·ªØ li·ªáu"""
        return self.cipher_suite.encrypt(message.encode())
    
    def decrypt_message(self, encrypted_data):
        """Gi·∫£i m√£ d·ªØ li·ªáu"""
        try:
            return self.cipher_suite.decrypt(encrypted_data).decode()
        except Exception as e:
            print(f"L·ªói gi·∫£i m√£: {e}")
            return None
    
    def send_data(self, data_str):
        """G·ª≠i d·ªØ li·ªáu ƒë·∫øn server v√† nh·∫≠n ph·∫£n h·ªìi"""
        try:
            # M√£ h√≥a d·ªØ li·ªáu
            encrypted_data = self.encrypt_message(data_str)
            
            # G·ª≠i ƒë·∫øn server
            self.socket.sendto(encrypted_data, (self.server_host, self.server_port))
            
            # Nh·∫≠n ph·∫£n h·ªìi
            encrypted_response, server_address = self.socket.recvfrom(4096)
            
            # Gi·∫£i m√£ ph·∫£n h·ªìi
            decrypted_response = self.decrypt_message(encrypted_response)
            if decrypted_response:
                return json.loads(decrypted_response)
            else:
                return {'type': 'error', 'data': 'Kh√¥ng th·ªÉ gi·∫£i m√£ ph·∫£n h·ªìi'}
                
        except socket.timeout:
            return {'type': 'error', 'data': 'Timeout'}
        except Exception as e:
            return {'type': 'error', 'data': f'L·ªói: {str(e)}'}
    
    def test_demo(self):
        """Demo ·ª©ng d·ª•ng"""
        print("üß™ === DEMO ·ª®NG D·ª§NG CLIENT/SERVER UDP ===")
        print("üîê M√£ h√≥a: AES (Fernet)")
        print("-" * 50)
        
        # Test data - ch·ªâ s·ª≠ d·ª•ng m√£ c√≥ trong Finnhub
        test_cases = [
            ("15", "G·ª≠i s·ªë nguy√™n d∆∞∆°ng"),
            ("AAPL", "Truy v·∫•n c·ªï phi·∫øu Apple"),
            ("25", "G·ª≠i s·ªë nguy√™n d∆∞∆°ng kh√°c"),
            ("GOOGL", "Truy v·∫•n c·ªï phi·∫øu Google"),
            ("MSFT", "Truy v·∫•n c·ªï phi·∫øu Microsoft"),
            ("-5", "G·ª≠i s·ªë √¢m (s·∫Ω b·ªã b·ªè qua)"),
            ("TSLA", "Truy v·∫•n c·ªï phi·∫øu Tesla"),
            ("10", "G·ª≠i s·ªë nguy√™n cu·ªëi"),
            ("INVALID123", "M√£ c·ªï phi·∫øu kh√¥ng t·ªìn t·∫°i"),
            ("0", "K·∫øt th√∫c v√† nh·∫≠n t·ªïng")
        ]
        
        for data, description in test_cases:
            print(f"\nüì§ {description}: '{data}'")
            response = self.send_data(data)
            
            response_type = response.get('type', 'unknown')
            response_data = response.get('data', '')
            
            if response_type == 'number_received':
                print(f"‚úÖ {response_data}")
            elif response_type == 'number_ignored':
                print(f"‚ö†Ô∏è  {response_data}")
            elif response_type == 'stock_info':
                stock_data = response_data
                if stock_data['status'] == 'success':
                    source_icon = "üåê" if stock_data.get('source') == 'Finnhub API' else "üìä"
                    currency = stock_data['currency']
                    price = stock_data['price']
                    
                    # Format gi√° theo currency
                    if currency == 'USD':
                        price_str = f"${price}"
                    elif currency == 'VND':
                        price_str = f"{price:,.0f}"
                    else:
                        price_str = f"{price}"
                    
                    print(f"{source_icon} {stock_data['symbol']}: {price_str} {currency}")
                    print(f"   C√¥ng ty: {stock_data['company']}")
                    if stock_data.get('source'):
                        print(f"   Ngu·ªìn: {stock_data['source']}")
                else:
                    print(f"‚ùå {stock_data['message']}")
            elif response_type == 'final_sum':
                final_data = response_data
                print(f"\nüéØ === K·∫æT QU·∫¢ CU·ªêI C√ôNG ===")
                print(f"üìä C√°c s·ªë ƒë√£ g·ª≠i: {final_data['numbers']}")
                print(f"üßÆ T·ªïng c√°c s·ªë > 0: {final_data['total']}")
                print("=" * 40)
            elif response_type == 'error':
                print(f"‚ùå L·ªói: {response_data}")
            
            time.sleep(1)  # Pause gi·ªØa c√°c request
        
        print(f"\n‚úÖ Demo ho√†n th√†nh!")
        self.socket.close()

if __name__ == "__main__":
    client = TestClient()
    client.test_demo()
